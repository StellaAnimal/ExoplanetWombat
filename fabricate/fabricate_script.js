// fabricate_script.js
document.addEventListener('DOMContentLoaded', () => {
    setInputValueFromUrl("name1");
    setInputValueFromUrl("name2");
    addFixedScoresFromUrl();

    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('auto-run') === 'true') calculateCompatibility();
});

let fixedScores = [];

document.getElementById('add-fixed-btn').addEventListener('click', addFixedScore);

function toggleSidebar() {
    document.getElementById('sidebar').classList.toggle('active');
    renderSavedList();
}

function addFixedScoresFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const allNames1 = urlParams.getAll('fixed-name1');
    const allNames2 = urlParams.getAll('fixed-name2');
    const allScores = urlParams.getAll('fixed-score');

    if (allNames1.length !== allNames2.length || allNames1.length !== allScores.length) return;

    for (let i = 0; i < allNames1.length; i++) {
        const name1 = allNames1[i];
        const name2 = allNames2[i];
        const score = parseInt(allScores[i], 10);
        if (!name1 || !name2 || isNaN(score) || score < 0 || score > 100) continue;
        fixedScores.push({ name1, name2, score });
    }
    renderSavedList();
}

function addFixedScore() {
    const name1 = document.getElementById('fixed-name1').value.trim();
    const name2 = document.getElementById('fixed-name2').value.trim();
    const score = parseInt(document.getElementById('fixed-score').value, 10);
    if (!name1 || !name2 || isNaN(score) || score < 0 || score > 100) {
        alert("Ïù¥Î¶ÑÍ≥º 0-100 ÏÇ¨Ïù¥Ïùò Ïú†Ìö®Ìïú Ï†êÏàòÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
        return;
    }
    fixedScores.push({ name1, name2, score });
    renderSavedList();
    document.getElementById('fixed-name1').value = '';
    document.getElementById('fixed-name2').value = '';
    document.getElementById('fixed-score').value = '';
}

function renderSavedList() {
    const savedList = document.getElementById('saved-list');
    savedList.innerHTML = '';
    fixedScores.forEach((item, index) => {
        const li = document.createElement('li');
        li.innerHTML = `<span>${item.name1} & ${item.name2}: ${item.score}Ï†ê</span>
                        <button class="delete-btn" data-index="${index}">ÏÇ≠Ï†ú</button>`;
        savedList.appendChild(li);
    });
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', e => deleteFixedScore(e.target.dataset.index));
    });
}

function deleteFixedScore(index) {
    fixedScores.splice(index, 1);
    renderSavedList();
}

const messages = {
    0: "Ïùå‚Ä¶ ÏïÑÏßÅ ÏÑúÎ°ú Ïûò Î™®Î•¥Îäî ÏÉÅÌÉúÎÑ§Ïöî. üòÖ",
    5: "Ï°∞Í∏à Ïñ¥ÏÉâÌïòÏßÄÎßå Í∞ÄÎä•ÏÑ±ÏùÄ ÏûàÏñ¥Ïöî. ü§è",
    10: "ÏÑúÎ°úÏóê ÎåÄÌï¥ Ìò∏Í∏∞Ïã¨ÏùÄ ÏûàÏßÄÎßå ÏïÑÏßÅ Î©ÄÏóàÎÑ§Ïöî. üßê",
    15: "ÏûëÏùÄ ÎåÄÌôîÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. üí¨",
    20: "Ï°∞Í∏àÏî© ÏπúÌï¥ÏßÄÎäî Ï§ëÏù¥ÏóêÏöî. üå±",
    25: "ÏÑúÎ°úÎ•º Í¥ÄÏ∞∞ÌïòÍ≥† Ïù¥Ìï¥ÌïòÎ†§Îäî ÎÖ∏Î†•Ïù¥ ÌïÑÏöîÌï¥Ïöî. üëÄ",
    30: "Ïö¥Î™ÖÏùò Ïû•ÎÇúÏùºÍπåÏöî? üòâ",
    35: "ÏÑúÎ°ú Ï°∞Í∏àÏî© ÎßàÏùåÏù¥ ÌÜµÌïòÎäî Ï§ëÏù¥ÏóêÏöî. üíå",
    40: "ÏÑúÎ°úÏùò Îã§Î¶ÑÏùÑ Ïù∏Ï†ïÌïòÎäî ÎÖ∏Î†•Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. üîë",
    45: "ÏÑúÎ°úÏùò Ïû•Ï†êÍ≥º Îã®Ï†êÏùÑ Ïù¥Ìï¥Ìï† ÎïåÏûÖÎãàÎã§. ‚öñÔ∏è",
    50: "ÏïåÏïÑÍ∞à ÏãúÍ∞ÑÏù¥ Ï°∞Í∏à ÌïÑÏöîÌï¥Ïöî. ‚òïÔ∏è",
    55: "Í¥ÄÍ≥ÑÍ∞Ä Ï°∞Í∏àÏî© ÍπäÏñ¥ÏßÄÍ≥† ÏûàÏñ¥Ïöî. üå∏",
    60: "ÎÖ∏Î†•ÌïòÎ©¥ Îçî Ï¢ãÏïÑÏßà Ïàò ÏûàÎäî ÏÇ¨Ïù¥! ü§ù",
    65: "Ï°∞Í∏àÏî© Ïã†Î¢∞Í∞Ä ÏåìÏù¥Îäî Ï§ëÏûÖÎãàÎã§. ‚ú®",
    70: "ÏÑúÎ°úÏóêÍ≤å Ï¢ãÏùÄ ÏòÅÌñ•ÏùÑ Ï£ºÎäî ÏÇ¨Ïù¥ÎÑ§Ïöî. üëç",
    75: "Ìï®ÍªòÎùºÏÑú Ï¶êÍ±∞Ïö¥ Í¥ÄÍ≥ÑÏòàÏöî. üòÑ",
    80: "Í∏çÏ†ïÏ†ÅÏù∏ Í∏∞Ïö¥Ïù¥ ÎÑòÏπòÎäî Í¥ÄÍ≥Ñ! üòä",
    85: "ÏÑúÎ°úÏùò Ïû•Ï†êÏùÑ Ï∂©Î∂ÑÌûà ÎäêÎÅºÍ≥† ÏûàÏñ¥Ïöî. üåà",
    90: "ÌôòÏÉÅÏùò Ï°∞Ìï©! üíë",
    95: "ÏòÅÌòºÏùò Îã®Ïßù, Ï∞∞Îñ°Í∂ÅÌï©! ‚ú®",
    100: "Ï≤úÏÉùÏó∞Î∂Ñ, 100% Ïö¥Î™ÖÏ†ÅÏù∏ ÏÇ¨ÎûëÏûÖÎãàÎã§! ‚ù§Ô∏èüéâ"
};

function getMessageByScore(score) {
    const rounded = Math.floor(score / 5) * 5;
    return messages[rounded] || messages[0];
}

function setInputValueFromUrl(paramName) {
    const urlParams = new URLSearchParams(window.location.search);
    const input = document.getElementById(paramName);
    if (input && urlParams.has(paramName)) input.value = urlParams.get(paramName);
}

function calculateCompatibility() {
    const name1 = document.getElementById('name1').value.trim();
    const name2 = document.getElementById('name2').value.trim();
    const scoreDisplay = document.getElementById('score-display');
    const messageDisplay = document.getElementById('message-display');
    const loadingState = document.getElementById('loading-state');
    const btn = document.getElementById('calculate-btn');

    if (!name1 || !name2) {
        scoreDisplay.innerText = "Ïù¥Î¶ÑÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
        messageDisplay.innerText = "";
        return;
    }

    scoreDisplay.className = '';
    messageDisplay.className = '';
    scoreDisplay.innerText = "";
    messageDisplay.innerText = "";
    loadingState.style.display = 'block';
    btn.disabled = true;

    setTimeout(() => {
        loadingState.style.display = 'none';

        // fixedScore Ïö∞ÏÑ† Ï†ÅÏö©
        const fixed = fixedScores.find(rule =>
            (rule.name1 === name1 && rule.name2 === name2) ||
            (rule.name1 === name2 && rule.name2 === name1)
        );

        let score;
        if (fixed) {
            score = fixed.score;
        } else {
            // ÎûúÎç§ Ï†úÍ±∞, Ìï≠ÏÉÅ ÎèôÏùº Í≥ÑÏÇ∞
            const sum1 = [...name1].reduce((a, c) => a + c.charCodeAt(0), 0);
            const sum2 = [...name2].reduce((a, c) => a + c.charCodeAt(0), 0);
            score = 100 - (Math.abs(sum1 - sum2) % 100);
            score = Math.max(30, score);
        }
        displayResult(score, scoreDisplay, messageDisplay);
    }, 1000);
}


function countUp(element, endValue, callback) {
    const duration = 2000;
    const startTime = Date.now();
    function animate() {
        const now = Date.now();
        const progress = Math.min(1, (now - startTime)/duration);
        const eased = 1 - Math.pow(1 - progress, 3);
        const val = Math.floor(eased * endValue);
        element.innerText = `${val}Ï†ê`;
        if(progress < 1) requestAnimationFrame(animate);
        else { element.innerText = `${endValue}Ï†ê`; callback(); }
    }
    animate();
}

function typeWriter(el, text, cb) {
    let i = 0;
    el.innerText = '';
    function type() {
        if(i < text.length) {
            el.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, 50);
        } else cb();
    }
    type();
}

function displayResult(score, scoreDisplay, messageDisplay) {
    const message = getMessageByScore(score);

    countUp(scoreDisplay, score, () => {
        scoreDisplay.classList.add('show-score');

        // ==================== Ìö®Í≥º Î™©Î°ù ====================
        const effectsList = [
            effectExplosiveConfetti, effectSideBursts, effectFireParticles, effectSnowflakes,
            effectHearts, effectGlitter, effectStars, effectRibbons, effectLaserBeams, effectBubbles,
            effectDiamonds, effectWaveParticles, effectNeonCircles, effectFireworks, effectRocket,
            effectRainbowFireworks, effectNeonFireworks, effectGalaxy, effectSparks, effectSnow
        ];

        // Ï†êÏàòÏóê Îî∞Î•∏ Ïã§ÌñâÌï† Ìö®Í≥º Í∞úÏàò Í≤∞Ï†ï
        let effectCount;
        if (score <= 40) effectCount = 0;
        else if (score <= 70) effectCount = 1;
        else if (score <= 90) effectCount = 2;
        else if (score <= 95) effectCount = 3;
        else if (score <= 99) effectCount = 4;
        else effectCount = 5;

        // Ï§ëÎ≥µ ÏóÜÏù¥ ÎûúÎç§ ÏÑ†ÌÉù
        const chosenEffects = [];
        const effectsCopy = [...effectsList];
        for (let i = 0; i < effectCount; i++) {
            const idx = Math.floor(Math.random() * effectsCopy.length);
            chosenEffects.push(effectsCopy[idx]);
            effectsCopy.splice(idx, 1); // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Ìö®Í≥º Ï†úÍ±∞
        }

        // ==================== ÏÑ†ÌÉùÎêú Ìö®Í≥º ÌÜµÌï© ====================
        const combinedParticles = [];
        const combinedEmitters = [];

        chosenEffects.forEach(fn => {
            const { particles, emitters } = fn(true); // trueÎ•º Ï†ÑÎã¨Ìï¥ÏÑú configÎßå Î∞òÌôòÌïòÎèÑÎ°ù ÏàòÏ†ï
            if (particles) combinedParticles.push(particles);
            if (emitters) combinedEmitters.push(...emitters);
        });

        if (combinedParticles.length || combinedEmitters.length) {
            tsParticles.load("tsparticles", {
                particles: combinedParticles,
                emitters: combinedEmitters
            });
        }

        // Î©îÏãúÏßÄ Ï∂úÎ†•
        typeWriter(messageDisplay, message, () => {
            messageDisplay.classList.add('fadeIn');
            document.getElementById('calculate-btn').disabled = false;
        });
    });
}


// ==================== 20Í∞ú Ìö®Í≥º (returnConfig ÏßÄÏõê) ====================

// 1. Ìè≠Ï£Ω ÎåÄÌè≠Î∞ú
function effectExplosiveConfetti(returnConfig = false) {
    const config = {
        particles: { number: { value: 200 }, color: { value: ["#ff0","#f00","#0ff"] }, shape: { type: "circle" }, move: { speed: 12, outModes: "destroy" } },
        emitters: [{ position: { x: "50%", y: "50%" }, rate: { quantity: 200, delay: 0 } }]
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 2. Ï¢åÏö∞ Ïó∞ÏÜç Ìè≠Ï£Ω
function effectSideBursts(returnConfig = false) {
    const emitters = ["10%", "90%"].map(pos => ({
        position: { x: pos, y: "60%" },
        rate: { quantity: 30, delay: 0 }
    }));
    const config = {
        particles: { number: { value: 30 }, color: { value: ["#ff0","#0f0","#00f"] }, shape: { type: "circle" }, move: { speed: 8, outModes: "destroy" } },
        emitters
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 3. Îã®Ïùº Î∂àÍΩÉ
function effectFireParticles(returnConfig = false) {
    const config = {
        particles: { number: { value: 50 }, color: { value: ["#ff0000","#ff6600"] }, shape: { type: "circle" }, move: { speed: 8, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 4. ÎààÏÜ°Ïù¥
function effectSnowflakes(returnConfig = false) {
    const config = {
        particles: { number: { value: 100 }, color: { value: "#fff" }, shape: { type: "circle" }, move: { speed: 2, outModes: "destroy" } },
        emitters: [{ position: { x: "50%", y: "0%" }, rate: { quantity: 100, delay: 0 } }]
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 5. ÌïòÌä∏
function effectHearts(returnConfig = false) {
    const config = {
        particles: { number: { value: 80 }, color: { value: ["#ff0077","#ff66aa"] }, shape: { type: "char", character: { value: ["‚ù§"] } }, move: { speed: 5, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 6. Î∞òÏßùÏù¥
function effectGlitter(returnConfig = false) {
    const config = {
        particles: { number: { value: 200 }, color: { value: ["#fff","#ff0","#f0f"] }, shape: { type: "circle" }, move: { speed: 6, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 7. Î≥Ñ
function effectStars(returnConfig = false) {
    const config = {
        particles: { number: { value: 80 }, color: { value: ["#ffff00","#ffdd00"] }, shape: { type: "star" }, move: { speed: 5, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 8. Î¶¨Î≥∏
function effectRibbons(returnConfig = false) {
    const config = {
        particles: { number: { value: 60 }, color: { value: ["#ff69b4","#00f","#0f0"] }, shape: { type: "polygon", sides: 4 }, move: { speed: 4, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 9. Î†àÏù¥Ï†Ä
function effectLaserBeams(returnConfig = false) {
    const config = {
        particles: { number: { value: 120 }, color: { value: ["#ff0","#0ff","#f0f"] }, shape: { type: "circle" }, move: { speed: 12, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 10. Î≤ÑÎ∏î
function effectBubbles(returnConfig = false) {
    const config = {
        particles: { number: { value: 70 }, color: { value: ["#aaf","#fff"] }, shape: { type: "circle" }, move: { speed: 2, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 11. Îã§Ïù¥ÏïÑÎ™¨Îìú
function effectDiamonds(returnConfig = false) {
    const config = {
        particles: { number: { value: 60 }, color: { value: ["#0ff","#0aa","#0f0"] }, shape: { type: "polygon", sides: 4 }, move: { speed: 5, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 12. Ïõ®Ïù¥Î∏å ÏûÖÏûê
function effectWaveParticles(returnConfig = false) {
    const config = {
        particles: { number: { value: 90 }, color: { value: ["#ff0","#f0f","#0ff"] }, shape: { type: "circle" }, move: { speed: 8, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 13. ÎÑ§Ïò® Ïõê
function effectNeonCircles(returnConfig = false) {
    const config = {
        particles: { number: { value: 80 }, color: { value: ["#0ff","#f0f"] }, shape: { type: "circle" }, move: { speed: 6, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 14. Ìè≠Ï£Ω+Î≥Ñ
function effectFireworks(returnConfig = false) {
    if (returnConfig) {
        return {
            particles: { number: { value: 280 }, color: { value: ["#ff0","#f00","#0ff","#ffff00","#ffdd00"] }, shape: { type: "circle" }, move: { speed: 12, outModes: "destroy" } },
            emitters: [{ position: { x: "50%", y: "50%" }, rate: { quantity: 280, delay: 0 } }]
        };
    }
    effectExplosiveConfetti();
    effectStars();
}

// 15. Î°úÏºì
function effectRocket(returnConfig = false) {
    const config = {
        particles: { number: { value: 50 }, color: { value: ["#ff0","#f00"] }, shape: { type: "circle" }, move: { speed: 10, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 16. Î†àÏù∏Î≥¥Ïö∞ Ìè≠Ï£Ω
function effectRainbowFireworks(returnConfig = false) {
    const config = {
        particles: { number: { value: 120 }, color: { value: ["#f00","#ff0","#0f0","#0ff","#00f","#f0f"] }, shape: { type: "circle" }, move: { speed: 10, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 17. ÎÑ§Ïò® Ìè≠Ï£Ω
function effectNeonFireworks(returnConfig = false) {
    const config = {
        particles: { number: { value: 100 }, color: { value: ["#0ff","#f0f","#ff0"] }, shape: { type: "circle" }, move: { speed: 12, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 18. Í∞§Îü≠Ïãú
function effectGalaxy(returnConfig = false) {
    const config = {
        particles: { number: { value: 80 }, color: { value: ["#000","#555","#fff"] }, shape: { type: "circle" }, move: { speed: 4, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 19. Ïä§ÌååÌÅ¨
function effectSparks(returnConfig = false) {
    const config = {
        particles: { number: { value: 100 }, color: { value: ["#ff0","#fff","#f00"] }, shape: { type: "circle" }, move: { speed: 15, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}

// 20. Îàà
function effectSnow(returnConfig = false) {
    const config = {
        particles: { number: { value: 100 }, color: { value: "#fff" }, shape: { type: "circle" }, move: { speed: 3, outModes: "destroy" } }
    };
    if (returnConfig) return config;
    tsParticles.load("tsparticles", config);
}
